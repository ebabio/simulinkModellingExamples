%%  Trim model for a Duffing continuous/discrete system

%% Setup workspace

clear
clc

%% Run init script

% define parameters for the duffing system and run an open loop sim
a_init_model;

%% Trim using Operating Point
% this method is contained in Simulink Control Design. It offers many more 
% features than the classical trim function such as:
% * working with reference models
% * can have objective and constraint functions for trimming
% * can be used for remapping states
% see https://www.mathworks.com/help/slcontrol/ug/operspec.html

% operating point can be generated using the steady-state manager and exported here
% and then trimmed in batches for example.

% get an operating point from the current state
op0 = operspec(model);

% edit operating point
% it can be done graphically on 'Steady State Manager' Simulink App (SSM), 
% function code has been generated by SSM.
opspec = trim_constraints(op0);

% find operating point
opTrim = findop(model,opspec);

%% Simulate Mode from operating point

% set initial state to operating point with small perturbation:
opSim = opTrim;
opSim.Inputs.u = opSim.Inputs.u + 1e-2;

% replicate the way it is done by the SSM updating the Model Configuration
% see Model Settings / Data Import/Export
op_string = 'opSim';
set_param(model, 'LoadExternalInput', 'on')
set_param(model, 'ExternalInput', sprintf('getinputstruct(%s)', op_string) )
set_param(model, 'LoadInitialState', 'on')
set_param(model, 'InitialState', sprintf('getstatestruct(%s)', op_string) )

% simulate
simOut1 = sim(model);

% Plot trajectory in phase portrait
xSim1_dataset = get_simulation_dataset(simOut1.xout, 'x'); % get dataset from name
xSim1 = xSim1_dataset.Values.Data';
f1 = figure(1);
hold on
f1.NumberTitle = 'off';
plot(xSim1(1,:), xSim1(2,:))
f1Legend{2} = 'x1';
legend(f1Legend);

%% Low Level model handling
% the different methods of the model can be called for different purposes
% https://www.mathworks.com/help/simulink/slref/model_cmd.html

% % get initial states in structure modes from operating point
for i=1:size(refMdls) % need to 
    set_param(refMdls{i},'SaveFormat','Structure');
end

% get states and inputs for low level handling
u0_struct = getinputstruct(opTrim); % this is the good way, but it doesn't work
x0_struct = getstatestruct(opTrim);

[x0,u0] = getxu(opTrim); % a slightly more obscure alternative
% set_param(model, 'InitInArrayFormatMsg', 'none'); % disable the warning triggered by using the above

% we can compile the system and access it programatically
% how to access the model and the effect of these function is defined in
% https://www.mathworks.com/help/simulink/sfg/how-the-simulink-engine-interacts-with-c-s-functions.html
[sizes, x0Alt, xStr] = feval(model, [],[],[],'compile');
y = feval(model, 0, x0_struct, u0, 'outputs'); % need to do it before calling anything else
xDot = feval(model, 0, x0_struct, u0, 'derivs'); % get the states derivatives
xNext = feval(model, 0, x0_struct, u0, 'update'); % get next state of discrte states
feval(model, [],[],[],'term');

% revert data format to dataset
for i=1:size(refMdls)
    set_param(refMdls{i},'SaveFormat','Dataset');
end

% A more human readable version of the states
% get info on the system on the sizes
% (it also allows for other call conventions!)
sldiagnostics(model,'Sizes');

%% Trim condition
% autogenerated from Steady State Manager

% should trim using the input to cancel derivative

function opspec = trim_constraints(opspec)
% Set the constraints on the states in the model.
% - The defaults for all states are Known = false, SteadyState = true,
%   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.

% State (1) - model_openloop/duffing/duffingSystem/integrator/xDotIntegrator
% - Default model initial conditions are used to initialize optimization.
opspec.States(1).Min = [0.1;-Inf];
opspec.States(1).Max = [0.5;Inf];

% Set the constraints on the inputs in the model.
% - The defaults for all inputs are Known = false, Min = -Inf, and
% Max = Inf.

% Input (1) - model_openloop/u
opspec.Inputs(1).u = 0;

% Set the constraints on the outputs in the model.
% - The defaults for all outputs are Known = false, Min = -Inf, and
% Max = Inf.

% Output (1) - model_openloop/x
% - Default model initial conditions are used to initialize optimization.
end
