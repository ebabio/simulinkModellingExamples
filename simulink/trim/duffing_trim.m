%%  Initialization script for the Duffing continuous/discrete simulation

%% Setup workspace

clear
clc

%% Duffing system parameters
% Reusing the nomenclature from: http://mathworld.wolfram.com/DuffingDifferentialEquation.html

% duffing system
delta = 0;
beta = 1;
omega2 = -1;

% forcing term
gamma = 0;
omega = .01;
phi = 0;

%% Simulation parameters

% main sim parameters
dt = 1e-2;
x0 = [0; .1];
t_end = 10;

% auxiliary parameters
K = zeros(1,2); % no feedback
Ts = 30*dt;     % controller sampling time

%% Load and setup model

% define model
model = 'duffing';

% terminate model if started
try
    feval(model, [],[],[],'term');
catch
end

% open model and dependencies
open_system(model)
refMdls = find_mdlrefs(model);
for i=1:size(refMdls)
    open_system(refMdls{i})  
end

% model settings
% https://www.mathworks.com/help/simulink/slref/set_param.html
set_param(model, 'LoadExternalInput', 'off') % needed to drop operating points
set_param(model, 'LoadInitialState', 'off')
set_param(model, 'Solver', 'FixedStepAuto', 'FixedStep', 'dt' )

% reference models settings
for i=1:size(refMdls)
    set_param(refMdls{i},'SaveFormat','Dataset');   
end

%% Simulate Model

% simulate
simOut0 = sim(model);

% Plot trajectory in phase portrait
xSim0 = simOut0.yout{1}.Values.Data';
f1 = figure(1);
clf reset
f1.Name=  'Model Sim';
f1.NumberTitle = 'off';
plot(xSim0(1,:), xSim0(2,:))
axis equal
title('Duffing System Phase Portrait')
xlabel('$x$','interpreter','latex')
ylabel('$\dot{x}$','interpreter','latex')
f1Legend{1} = 'x0';
legend(f1Legend);

%% Trim using Operating Point
% this method is contained in Simulink Control Design. It much more
% flexible than the classical trim function and can work with reference
% model

% operating point can be generated using the steady-state manager and exported here
% and then trimmed in batches for example.

% get an operating point from the current state
op0 = operspec(model);

% edit operating point
% it can be done graphically on 'Steady State Manager' Simulink App (SSM), 
% function code has been generated by SSM.
opspec = trim_constraints(op0);

% find operating point
opTrim = findop(model,opspec);

%% Simulate Mode from operating point

% set initial state to operating point:
% replicate the way it is done by the SSM updating the Model Configuration
% see Model Settings / Data Import/Export
op_string = 'opTrim';
set_param(model, 'LoadExternalInput', 'on')
set_param(model, 'ExternalInput', sprintf('getinputstruct(%s)', op_string) )
set_param(model, 'LoadInitialState', 'on')
set_param(model, 'InitialState', sprintf('getstatestruct(%s)', op_string) )

% simulate
simOut1 = sim(model);

% Plot trajectory in phase portrait
xSim1 = simOut1.yout{1}.Values.Data';
f1 = figure(1);
hold on
f1.NumberTitle = 'off';
plot(xSim1(1,:), xSim1(2,:))
f1Legend{2} = 'x1';
legend(f1Legend);

%% Low Level model handling
% the different methods of the model can be called for different purposes
% https://www.mathworks.com/help/simulink/slref/model_cmd.html

% get initial states in structure modes from operating point
for i=1:size(refMdls) % need to 
    set_param(refMdls{i},'SaveFormat','Structure');
end
u0_struct = getinputstruct(opTrim);
x0_struct = getstatestruct(opTrim);

% we can compile the system and access it programatically
[sizes, x0Alt, xStr] = feval(model, [],[],[],'compile');
y = feval(model, 0, x0_struct, u0_struct,'outputs'); % need to do it before calling anything else
xDot = feval(model, 0, x0_struct, u0_struct,'derivs'); % get the states derivatives
xNext = feval(model, 0, x0_struct, u0_struct,'update'); % get next state of discrte states
feval(model, [],[],[],'term');

% revert data format to dataset
for i=1:size(refMdls)
    set_param(refMdls{i},'SaveFormat','Dataset');
end

% A more human readable version of the states
% get info on the system on the sizes
% (it also allows for other call conventions!)
sldiagnostics(model,'Sizes');

%% Trim condition
% autogenerated from Steady State Manager

function opspec = trim_constraints(opspec)
% Set the constraints on the states in the model.
% - The defaults for all states are Known = false, SteadyState = true,
%   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.

% State (1) - duffing/DuffingSystem/Integrator/xDotIntegrator
opspec.States(1).SteadyState = false;
opspec.States(1).Min = 0.05;

% State (2) - duffing/DuffingSystem/Integrator/xIntegrator
opspec.States(2).SteadyState = false;
opspec.States(2).Min = 0.8;

% State (3) - duffing/controller|controller/Delay
end
